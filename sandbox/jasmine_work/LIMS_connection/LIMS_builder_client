#C:\Users\jasmine.herri\OneDrive - Allen Institute\Project\specimen.csv

#how i got csv from query
#res.to_csv(r'C:\Users\jasmine.herri\OneDrive - Allen Institute\Project\specimen.csv')

import sqlalchemy 
import psycopg2
import pandas as pd
from Specimen import Specimen
from csv import DictReader

def main():

    engine = sqlalchemy.create_engine(
    "postgresql+psycopg2://LIMSUSER:LIMSPASSWORD@LIMSALIAS/lims2")

    donor_name = input("Enter name of the donor you want to query: ")

    query = '''
    select
    sp.id as specimen_id,
    sp.name as specimen_name,
    d.id as donor_id,
    p.name as project_name,
    plane.name as plane_of_section,
    h.name as hemisphere,
    parent.id as parent_specimen_id,
    parent.name as parent_specimen_name,
    sp.parent_x_coord,
    sp.parent_y_coord,
    sp.parent_z_coord
    from specimens sp
    left join donors d on sp.donor_id = d.id
    left join plane_of_sections plane on sp.plane_of_section_id = plane.id
    left join hemispheres h on sp.hemisphere_id = h.id
    left join specimens parent on sp.parent_id = parent.id
    left join projects p on sp.project_id = p.id
    where d.name = '%s'
''' % donor_name

    res = pd.read_sql_query(query,con=engine,dtype={'parent_specimen_id':'Int64',
                                                    'parent_x_coord':'Int32',
                                                    'parent_y_coord':'Int32',
                                                    'parent_z_coord':'Int32',})
    
    res.to_csv('donor.csv')

    with open("donor.csv", 'r') as csv_file:
        dict_reader = DictReader(csv_file)
        list_of_dict = list(dict_reader)

    # get list of Specimen objects
    list_of_specimens = build_specimen_list(list_of_dict)

    # get dict of specimen_ids to Specimen
    specimen_ids = specimen_metadata(list_of_specimens)
    
    # get dict of specimen_ids to list of Specimen children
    parent_to_child_dict = parent_to_child(list_of_specimens, specimen_ids)

    # populates specimens in specimen_ids with children (aka build hierarchy!)
    build_tree(specimen_ids, parent_to_child_dict)

    for id in specimen_ids:
        print(specimen_ids[id])   

    engine.dispose()


def build_specimen_list(list_of_dict):
    list_of_specimens = []

    #makes list of specimens with given info
    #not in tree form yet
    for element in list_of_dict:
        specimen = Specimen(element["specimen_id"], element["specimen_name"], element["donor_id"], element["project_name"], 
                            element["plane_of_section"], element["hemisphere"], element["parent_specimen_id"], element["parent_specimen_name"], 
                            element["parent_x_coord"], element["parent_y_coord"], element["parent_z_coord"])
        
        list_of_specimens.append(specimen)
    
    return list_of_specimens

#create dictionary of specimen_id keys to Specimen values
def specimen_metadata(list_of_specimens):
    specimen_ids = {}

    for specimen in list_of_specimens:
        id = specimen.specimen_id
        specimen_ids.update({id: specimen})

    return specimen_ids

# maps specimen_ids to a list of Specimen children
# if a specimen doesn't have kids it will map to an empty list
def parent_to_child(list_of_specimens, specimen_ids):
    #creates dictionary where keys are all of the specimen_ids
    parent_to_child_dict = {key: [] for key in specimen_ids.keys()}

    for specimen in list_of_specimens:
        parent_id = specimen.parent_specimen_id
        if parent_id != '':
            parent_to_child_dict[parent_id].append(specimen)

    return parent_to_child_dict

def build_tree(specimen_ids, parent_to_child):
    for parent in parent_to_child:  
        specimen_ids[parent].children = parent_to_child[parent]

main()


